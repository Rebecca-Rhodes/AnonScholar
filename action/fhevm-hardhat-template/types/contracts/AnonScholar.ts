/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AnonScholar {
  export type AnswerStruct = {
    encryptedContent: BytesLike;
    encryptedAnswerer: BytesLike;
    timestamp: BigNumberish;
    questionId: BigNumberish;
    answerId: BigNumberish;
    encryptedUpvotes: BytesLike;
    encryptedDownvotes: BytesLike;
    encryptedScore: BytesLike;
    isVisible: BytesLike;
    encryptedRandomRank: BytesLike;
  };

  export type AnswerStructOutput = [
    encryptedContent: string,
    encryptedAnswerer: string,
    timestamp: bigint,
    questionId: bigint,
    answerId: bigint,
    encryptedUpvotes: string,
    encryptedDownvotes: string,
    encryptedScore: string,
    isVisible: string,
    encryptedRandomRank: string
  ] & {
    encryptedContent: string;
    encryptedAnswerer: string;
    timestamp: bigint;
    questionId: bigint;
    answerId: bigint;
    encryptedUpvotes: string;
    encryptedDownvotes: string;
    encryptedScore: string;
    isVisible: string;
    encryptedRandomRank: string;
  };

  export type QuestionStruct = {
    encryptedContent: BytesLike;
    encryptedAsker: BytesLike;
    timestamp: BigNumberish;
    encryptedViewCount: BytesLike;
    encryptedAnswerCount: BytesLike;
    isActive: BytesLike;
    questionId: BigNumberish;
    encryptedRandomSeed: BytesLike;
  };

  export type QuestionStructOutput = [
    encryptedContent: string,
    encryptedAsker: string,
    timestamp: bigint,
    encryptedViewCount: string,
    encryptedAnswerCount: string,
    isActive: string,
    questionId: bigint,
    encryptedRandomSeed: string
  ] & {
    encryptedContent: string;
    encryptedAsker: string;
    timestamp: bigint;
    encryptedViewCount: string;
    encryptedAnswerCount: string;
    isActive: string;
    questionId: bigint;
    encryptedRandomSeed: string;
  };
}

export interface AnonScholarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "answerCounter"
      | "answerVotes"
      | "answers"
      | "castVote"
      | "encryptedActiveUsers"
      | "encryptedTotalAnswers"
      | "encryptedTotalQuestions"
      | "encryptedTotalVotes"
      | "getAnswer"
      | "getCounters"
      | "getPlatformStats"
      | "getQuestion"
      | "getQuestionAnswers"
      | "getRecentQuestions"
      | "getUserAnswers"
      | "getUserQuestions"
      | "hasUserVoted"
      | "incrementViewCount"
      | "postAnswer"
      | "postQuestion"
      | "protocolId"
      | "questionAnswerIds"
      | "questionCounter"
      | "questionVotes"
      | "questions"
      | "userAnswerIds"
      | "userQuestionIds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnswerPosted"
      | "ContentModerated"
      | "QuestionPosted"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "answerCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "answerVotes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "answers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedActiveUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedTotalAnswers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedTotalQuestions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedTotalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCounters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionAnswers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentQuestions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAnswers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserQuestions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserVoted",
    values: [BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementViewCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postAnswer",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postQuestion",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "questionAnswerIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "questionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "questionVotes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "questions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAnswerIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userQuestionIds",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "answerCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "answerVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "answers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encryptedActiveUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedTotalAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedTotalQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedTotalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCounters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementViewCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "questionAnswerIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "questionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "questionVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "questions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userAnswerIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userQuestionIds",
    data: BytesLike
  ): Result;
}

export namespace AnswerPostedEvent {
  export type InputTuple = [
    questionId: BigNumberish,
    answerId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    questionId: bigint,
    answerId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    questionId: bigint;
    answerId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentModeratedEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    isQuestion: boolean,
    isVisible: boolean
  ];
  export type OutputTuple = [
    contentId: bigint,
    isQuestion: boolean,
    isVisible: boolean
  ];
  export interface OutputObject {
    contentId: bigint;
    isQuestion: boolean;
    isVisible: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestionPostedEvent {
  export type InputTuple = [questionId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [questionId: bigint, timestamp: bigint];
  export interface OutputObject {
    questionId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    targetId: BigNumberish,
    isQuestion: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    targetId: bigint,
    isQuestion: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    targetId: bigint;
    isQuestion: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonScholar extends BaseContract {
  connect(runner?: ContractRunner | null): AnonScholar;
  waitForDeployment(): Promise<this>;

  interface: AnonScholarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  answerCounter: TypedContractMethod<[], [bigint], "view">;

  answerVotes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, string, string] & {
        hasVoted: string;
        voteType: string;
        encryptedVoteWeight: string;
      }
    ],
    "view"
  >;

  answers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string
      ] & {
        encryptedContent: string;
        encryptedAnswerer: string;
        timestamp: bigint;
        questionId: bigint;
        answerId: bigint;
        encryptedUpvotes: string;
        encryptedDownvotes: string;
        encryptedScore: string;
        isVisible: string;
        encryptedRandomRank: string;
      }
    ],
    "view"
  >;

  castVote: TypedContractMethod<
    [
      targetId: BigNumberish,
      isQuestion: boolean,
      encryptedVoteType: BytesLike,
      voteTypeProof: BytesLike,
      encryptedWeight: BytesLike,
      weightProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  encryptedActiveUsers: TypedContractMethod<[], [string], "view">;

  encryptedTotalAnswers: TypedContractMethod<[], [string], "view">;

  encryptedTotalQuestions: TypedContractMethod<[], [string], "view">;

  encryptedTotalVotes: TypedContractMethod<[], [string], "view">;

  getAnswer: TypedContractMethod<
    [answerId: BigNumberish],
    [AnonScholar.AnswerStructOutput],
    "view"
  >;

  getCounters: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        currentQuestionCounter: bigint;
        currentAnswerCounter: bigint;
      }
    ],
    "view"
  >;

  getPlatformStats: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        totalQuestions: string;
        totalAnswers: string;
        totalVotes: string;
      }
    ],
    "view"
  >;

  getQuestion: TypedContractMethod<
    [questionId: BigNumberish],
    [AnonScholar.QuestionStructOutput],
    "view"
  >;

  getQuestionAnswers: TypedContractMethod<
    [questionId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getRecentQuestions: TypedContractMethod<
    [count: BigNumberish],
    [bigint[]],
    "view"
  >;

  getUserAnswers: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserQuestions: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  hasUserVoted: TypedContractMethod<
    [targetId: BigNumberish, isQuestion: boolean, user: AddressLike],
    [string],
    "view"
  >;

  incrementViewCount: TypedContractMethod<
    [questionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  postAnswer: TypedContractMethod<
    [
      questionId: BigNumberish,
      encryptedContent: BytesLike,
      contentProof: BytesLike,
      encryptedAnswerer: BytesLike,
      answererProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  postQuestion: TypedContractMethod<
    [
      encryptedContent: BytesLike,
      contentProof: BytesLike,
      encryptedAsker: BytesLike,
      askerProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  questionAnswerIds: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  questionCounter: TypedContractMethod<[], [bigint], "view">;

  questionVotes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, string, string] & {
        hasVoted: string;
        voteType: string;
        encryptedVoteWeight: string;
      }
    ],
    "view"
  >;

  questions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, string, bigint, string] & {
        encryptedContent: string;
        encryptedAsker: string;
        timestamp: bigint;
        encryptedViewCount: string;
        encryptedAnswerCount: string;
        isActive: string;
        questionId: bigint;
        encryptedRandomSeed: string;
      }
    ],
    "view"
  >;

  userAnswerIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userQuestionIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "answerCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "answerVotes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, string, string] & {
        hasVoted: string;
        voteType: string;
        encryptedVoteWeight: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "answers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string
      ] & {
        encryptedContent: string;
        encryptedAnswerer: string;
        timestamp: bigint;
        questionId: bigint;
        answerId: bigint;
        encryptedUpvotes: string;
        encryptedDownvotes: string;
        encryptedScore: string;
        isVisible: string;
        encryptedRandomRank: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      targetId: BigNumberish,
      isQuestion: boolean,
      encryptedVoteType: BytesLike,
      voteTypeProof: BytesLike,
      encryptedWeight: BytesLike,
      weightProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encryptedActiveUsers"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encryptedTotalAnswers"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encryptedTotalQuestions"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encryptedTotalVotes"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAnswer"
  ): TypedContractMethod<
    [answerId: BigNumberish],
    [AnonScholar.AnswerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCounters"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        currentQuestionCounter: bigint;
        currentAnswerCounter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlatformStats"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        totalQuestions: string;
        totalAnswers: string;
        totalVotes: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuestion"
  ): TypedContractMethod<
    [questionId: BigNumberish],
    [AnonScholar.QuestionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuestionAnswers"
  ): TypedContractMethod<[questionId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRecentQuestions"
  ): TypedContractMethod<[count: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserAnswers"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserQuestions"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasUserVoted"
  ): TypedContractMethod<
    [targetId: BigNumberish, isQuestion: boolean, user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementViewCount"
  ): TypedContractMethod<[questionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "postAnswer"
  ): TypedContractMethod<
    [
      questionId: BigNumberish,
      encryptedContent: BytesLike,
      contentProof: BytesLike,
      encryptedAnswerer: BytesLike,
      answererProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postQuestion"
  ): TypedContractMethod<
    [
      encryptedContent: BytesLike,
      contentProof: BytesLike,
      encryptedAsker: BytesLike,
      askerProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "questionAnswerIds"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "questionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "questionVotes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, string, string] & {
        hasVoted: string;
        voteType: string;
        encryptedVoteWeight: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "questions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, string, bigint, string] & {
        encryptedContent: string;
        encryptedAsker: string;
        timestamp: bigint;
        encryptedViewCount: string;
        encryptedAnswerCount: string;
        isActive: string;
        questionId: bigint;
        encryptedRandomSeed: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userAnswerIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userQuestionIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AnswerPosted"
  ): TypedContractEvent<
    AnswerPostedEvent.InputTuple,
    AnswerPostedEvent.OutputTuple,
    AnswerPostedEvent.OutputObject
  >;
  getEvent(
    key: "ContentModerated"
  ): TypedContractEvent<
    ContentModeratedEvent.InputTuple,
    ContentModeratedEvent.OutputTuple,
    ContentModeratedEvent.OutputObject
  >;
  getEvent(
    key: "QuestionPosted"
  ): TypedContractEvent<
    QuestionPostedEvent.InputTuple,
    QuestionPostedEvent.OutputTuple,
    QuestionPostedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "AnswerPosted(uint256,uint256,uint256)": TypedContractEvent<
      AnswerPostedEvent.InputTuple,
      AnswerPostedEvent.OutputTuple,
      AnswerPostedEvent.OutputObject
    >;
    AnswerPosted: TypedContractEvent<
      AnswerPostedEvent.InputTuple,
      AnswerPostedEvent.OutputTuple,
      AnswerPostedEvent.OutputObject
    >;

    "ContentModerated(uint256,bool,bool)": TypedContractEvent<
      ContentModeratedEvent.InputTuple,
      ContentModeratedEvent.OutputTuple,
      ContentModeratedEvent.OutputObject
    >;
    ContentModerated: TypedContractEvent<
      ContentModeratedEvent.InputTuple,
      ContentModeratedEvent.OutputTuple,
      ContentModeratedEvent.OutputObject
    >;

    "QuestionPosted(uint256,uint256)": TypedContractEvent<
      QuestionPostedEvent.InputTuple,
      QuestionPostedEvent.OutputTuple,
      QuestionPostedEvent.OutputObject
    >;
    QuestionPosted: TypedContractEvent<
      QuestionPostedEvent.InputTuple,
      QuestionPostedEvent.OutputTuple,
      QuestionPostedEvent.OutputObject
    >;

    "VoteCast(uint256,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
